const jsQuestions = [
    {
        id: 1,
        question: "Что такое замыкание (closure) в JavaScript?",
        answer: "Это функция, которая имеет доступ к своей внешней области видимости даже после того, как внешняя функция завершила выполнение."
    },
    {
        id: 2,
        question: "Чем отличается var от let и const?",
        answer: "var имеет функциональную область видимости и может быть переобъявлен; let и const — блочной области видимости, const нельзя переопределить."
    },
    {
        id: 3,
        question: "Что делает оператор '==='?",
        answer: "Сравнивает два значения по значению и типу (строгое сравнение)."
    },
    {
        id: 4,
        question: "Что такое hoisting?",
        answer: "Механизм поднятия объявлений переменных и функций в верхнюю часть своей области видимости."
    },
    {
        id: 5,
        question: "Как работает setTimeout?",
        answer: "Он запускает выполнение функции после указанной задержки в миллисекундах, не блокируя основной поток."
    },
    {
        id: 6,
        question: "Что такое промис (Promise)?",
        answer: "Объект, представляющий результат асинхронной операции, который может быть выполнен, отклонён или ожидаться."
    },
    {
        id: 7,
        question: "Разница между null и undefined?",
        answer: "null — намеренное отсутствие значения; undefined — значение переменной не было присвоено."
    },
    {
        id: 8,
        question: "Что делает метод Array.map()?",
        answer: "Создаёт новый массив с результатами вызова переданной функции для каждого элемента массива."
    },
    {
        id: 9,
        question: "Что такое стрелочная функция?",
        answer: "Короткий синтаксис объявления функции, не имеет собственного this, arguments и не может быть использована как конструктор."
    },
    {
        id: 10,
        question: "Как проверить, является ли переменная массивом?",
        answer: "Используя Array.isArray(value)."
    },
    {
        id: 11,
        question: "Что такое event loop?",
        answer: "Механизм, который позволяет JavaScript выполнять неблокирующий, асинхронный код через очередь событий и стек вызовов."
    },
    {
        id: 12,
        question: "Как работает метод fetch()?",
        answer: "Возвращает промис, который выполняется после завершения HTTP-запроса, обычно используется для работы с API."
    },
    {
        id: 13,
        question: "Что делает метод Object.assign()?",
        answer: "Копирует значения всех перечисляемых собственных свойств из одного или более объектов в целевой объект."
    },
    {
        id: 14,
        question: "Что такое NaN?",
        answer: "Специальное значение JavaScript, обозначающее 'Не число'."
    },
    {
        id: 15,
        question: "Как работает оператор spread (...) в массивах?",
        answer: "Разворачивает элементы массива в отдельные значения, полезен при копировании и объединении массивов."
    },
    {
        id: 16,
        question: "Что такое this в JavaScript?",
        answer: "Это ключевое слово, указывающее на объект, к которому привязана текущая функция."
    },
    {
        id: 17,
        question: "Чем отличается синхронный код от асинхронного?",
        answer: "Синхронный код выполняется последовательно, асинхронный — может выполняться параллельно с остальной программой."
    },
    {
        id: 18,
        question: "Что делает оператор typeof?",
        answer: "Возвращает строку, указывающую тип переданного значения."
    },
    {
        id: 19,
        question: "Можно ли использовать async/await без try/catch?",
        answer: "Да, но это не рекомендуется, так как не будет обработки ошибок асинхронного кода."
    },
    {
        id: 20,
        question: "Что делает метод JSON.stringify()?",
        answer: "Преобразует объект JavaScript в строку JSON."
    }
];
export default jsQuestions; 